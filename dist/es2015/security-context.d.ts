import { EventAggregator } from "aurelia-event-aggregator";
import { HttpClient, HttpResponseMessage } from "aurelia-http-client";
import { Router } from "aurelia-router";
import { I18N } from "aurelia-i18n";
import { Credential } from "./credential";
import { Authenticator } from "./authenticator";
import { Principal } from "./principal";
import { LocalStorage } from "aurelia-storage";
import { Tenant } from "./tenant";
export declare class SecurityContext {
    static AUTHENTICATED_EVENT: string;
    static UNAUTHENTICATED_EVENT: string;
    static TENANT_ID_HEADER: string;
    configuration: SecurityContextConfiguration;
    eventAggregator: EventAggregator;
    private api;
    private router;
    private i18n;
    private authenticator;
    private userPrincipal;
    private storage;
    private currentTenant;
    constructor(eventAggregator: EventAggregator, api: HttpClient, router: Router, i18n: I18N, storage: LocalStorage);
    configure(configuration: Object): void;
    refreshRouteVisibility(router: Router): void;
    authenticate(credential: Credential, remember?: boolean): Promise<Principal>;
    deauthenticate(navigateToSignOutRoute?: boolean): void;
    requestAccessToken(...scopes: string[]): Promise<string>;
    deleteAndRevokeToken(): Promise<any>;
    requestPasswordReset(principal: string): Promise<HttpResponseMessage>;
    resetPassword(token: string, password: string): Promise<HttpResponseMessage>;
    navigateToSignIn(message?: string): boolean;
    navigateToSignUp(): boolean;
    navigateToSignOut(): boolean;
    getAuthenticator(): Authenticator;
    getAuthenticationScheme(): string;
    getUserPrincipal(): Principal;
    isUserInRole(...roleNames: string[]): boolean;
    isSecure(): boolean;
    getCurrentTenant(): Tenant;
    switchTenant(tenant: Tenant): void;
}
export declare class SecurityContextConfiguration {
    signInRoute: string;
    signUpRoute: string;
    signOutRoute: string;
    forbiddenRoute: string;
    getPrincipalUrl: string;
    accessRequestUrl: string;
    accessRevokeUrl: string;
    accessTokenUrl: string;
    passwordResetUrl: string;
    clientId: string;
    scope: string;
    defaultTenantId: string;
    authorizationTokenStorageKey: string;
}
