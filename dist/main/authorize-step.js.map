{"version":3,"sources":["../../src/main/authorize-step.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6EAA0D;AAC1D,iDAAuF;AACvF,uDAAqD;AAGrD,IAAa,aAAa;IAMtB,uBAAY,eAAgC,EAAE,MAAc;QACxD,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED,2BAAG,GAAH,UAAI,kBAAyC,EAAE,IAAc;QAA7D,iBAuBC;QAtBG,GAAG,CAAC,CAAoB,UAAuC,EAAvC,KAAA,kBAAkB,CAAC,kBAAkB,EAAE,EAAvC,cAAuC,EAAvC,IAAuC;YAA1D,IAAI,WAAW,SAAA;YAChB,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,qBAAqB,IAAI,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC3G,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;oBAClD,MAAM,IAAI,yBAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,WAAW,EAAE;wBACpF,mDAAmD;wBACnD,iEAAiE;wBACjE,MAAM;wBACN,OAAO,EAAE,4CAA4C;wBACrD,IAAI,EAAE,kBAAkB,CAAC,QAAQ;qBACpC,CAAC,CAAC,CAAC;gBACR,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,UAAC,IAAY,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,EAAvC,CAAuC,CAAC,CAAC,CAAC,CAAC;oBAChK,MAAM,IAAI,yBAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,cAAc,EAAE;wBACvF,gDAAgD;wBAChD,sEAAsE;wBACtE,MAAM;wBACN,OAAO,EAAE,gDAAgD;wBACzD,IAAI,EAAE,kBAAkB,CAAC,QAAQ;qBACpC,CAAC,CAAC,CAAC;gBACR,CAAC;YACL,CAAC;SACJ;QACD,MAAM,CAAC,IAAI,EAAE,CAAC;IAClB,CAAC;IAEL,oBAAC;AAAD,CApCA,AAoCC,IAAA;AApCY,aAAa;IADzB,yCAAU;qCAOsB,kCAAe,EAAU,uBAAM;GANnD,aAAa,CAoCzB;AApCY,sCAAa","file":"authorize-step.js","sourcesContent":["import { autoinject } from \"aurelia-dependency-injection\";\nimport { Router, PipelineStep, NavigationInstruction, Redirect } from \"aurelia-router\";\nimport { SecurityContext } from \"./security-context\";\n\n@autoinject\nexport class AuthorizeStep implements PipelineStep {\n\n    private securityContext: SecurityContext;\n\n    private router: Router;\n\n    constructor(securityContext: SecurityContext, router: Router) {\n        this.securityContext = securityContext;\n        this.router = router;\n    }\n\n    run(currentInstruction: NavigationInstruction, next: Function): Promise<any> {\n        for (let instruction of currentInstruction.getAllInstructions()) {\n            if (instruction.config.settings.requireAuthentication || instruction.config.settings.hasOwnProperty(\"roles\")) {\n                if (this.securityContext.getUserPrincipal() == null) {\n                    throw new Redirect(this.router.generate(this.securityContext.configuration.signInRoute, {\n                        // message: this.i18n.tr(\"security:unauthorized\", {\n                        //     defaultValue: \"You are not authenticated, please sign-in.\"\n                        // }),\n                        message: \"You are not authenticated, please sign-in.\",\n                        path: currentInstruction.fragment\n                    }));\n                } else if (Array.isArray(instruction.config.settings.roles) && !instruction.config.settings.roles.some((role: string) => this.securityContext.isUserInRole(role))) {\n                    throw new Redirect(this.router.generate(this.securityContext.configuration.forbiddenRoute, {\n                        // message: this.i18n.tr(\"security:forbidden\", {\n                        //     defaultValue: \"You are not authorized to access this resource.\"\n                        // }),\n                        message: \"You are not authorized to access this resource\",\n                        path: currentInstruction.fragment\n                    }));\n                }\n            }\n        }\n        return next();\n    }\n\n}\n"]}