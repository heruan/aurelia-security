{"version":3,"sources":["../../src/main/authorize-request.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6EAA0D;AAE1D,yDAAiD;AACjD,uDAAqD;AAGrD,IAAa,gBAAgB;IAIzB,0BAAmB,eAAgC;QAC/C,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC3C,CAAC;IAEM,kCAAO,GAAd,UAAe,OAA2B;QACtC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,gCAAW,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAC7E,CAAC;QACD,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAEM,wCAAa,GAApB,UAAqB,OAA4B;QAC7C,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YACzB,KAAK,GAAG;gBACR,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,gCAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;oBACpD,IAAI,kBAAkB,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,gCAAW,CAAC,gBAAgB,CAAC,CAAC;oBAC3E,IAAI,yBAAyB,GAAG,cAAc,CAAC;oBAC/C,IAAI,yBAAyB,GAAG,yBAAyB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;oBACnF,IAAI,oBAAoB,GAAG,yBAAyB,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;oBACtE,IAAI,kBAAkB,GAAG,yBAAyB,CAAC,CAAC,CAAC,CAAC;oBACtD,MAAM,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;wBAC3B,KAAK,QAAQ;4BACb,IAAI,iBAAiB,GAAG,mEAAmE,CAAC;4BAC5F,IAAI,iBAAiB,GAAG,iBAAiB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;4BACnE,IAAI,KAAK,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;4BACjC,IAAI,KAAK,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;4BACjC,IAAI,gBAAgB,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;4BAC5C,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gCACZ,KAAK,iBAAiB;oCACtB,4BAA4B;oCAC5B,KAAK,CAAC;gCACN,KAAK,eAAe;oCACpB,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;oCAC3C,KAAK,CAAC;gCACN,KAAK,oBAAoB;oCACzB,0BAA0B;oCAC1B,KAAK,CAAC;4BACV,CAAC;4BACD,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;4BACxD,MAAM,OAAO,CAAC;oBAClB,CAAC;gBACL,CAAC;gBACD,KAAK,CAAC;QACV,CAAC;QACD,MAAM,OAAO,CAAC;IAClB,CAAC;IAEL,uBAAC;AAAD,CAnDA,AAmDC,IAAA;AAnDY,gBAAgB;IAD5B,yCAAU;qCAK6B,kCAAe;GAJ1C,gBAAgB,CAmD5B;AAnDY,4CAAgB","file":"authorize-request.js","sourcesContent":["import { autoinject } from \"aurelia-dependency-injection\";\nimport { Interceptor, HttpRequestMessage, HttpResponseMessage } from \"aurelia-http-client\";\nimport { HttpHeaders } from \"aurelia-http-utils\";\nimport { SecurityContext } from \"./security-context\";\n\n@autoinject\nexport class AuthorizeRequest implements Interceptor {\n\n    private securityContext: SecurityContext;\n\n    public constructor(securityContext: SecurityContext) {\n        this.securityContext = securityContext;\n    }\n\n    public request(message: HttpRequestMessage): HttpRequestMessage {\n        if (!message.headers.has(HttpHeaders.AUTHORIZATION)) {\n            return this.securityContext.getAuthenticator().authorizeMessage(message);\n        }\n        return message;\n    }\n\n    public responseError(message: HttpResponseMessage): HttpResponseMessage {\n        switch (message.statusCode) {\n            case 401:\n            if (message.headers.has(HttpHeaders.WWW_AUTHENTICATE)) {\n                let authenticateHeader = message.headers.get(HttpHeaders.WWW_AUTHENTICATE);\n                let authenticateHeaderPattern = /(\\w+)\\s+(.+)/;\n                let authenticateHeaderMatcher = authenticateHeaderPattern.exec(authenticateHeader);\n                let authenticationScheme = authenticateHeaderMatcher[1].toUpperCase();\n                let authenticationData = authenticateHeaderMatcher[2];\n                switch (authenticationScheme) {\n                    case \"BEARER\":\n                    let bearerDataPattern = /realm=\"([^\"]+)\",\\s+error=\"([^\"]+)\",\\s+error_description=\"([^\"]+)\"/;\n                    let bearerDataMatcher = bearerDataPattern.exec(authenticationData);\n                    let realm = bearerDataMatcher[1];\n                    let error = bearerDataMatcher[2];\n                    let errorDescription = bearerDataMatcher[3];\n                    switch (error) {\n                        case \"invalid_request\":\n                        // Only with 400 Bad Request\n                        break;\n                        case \"invalid_token\":\n                        this.securityContext.deauthenticate(false);\n                        break;\n                        case \"insufficient_scope\":\n                        // Only with 403 Frobidden\n                        break;\n                    }\n                    this.securityContext.navigateToSignIn(errorDescription);\n                    throw message;\n                }\n            }\n            break;\n        }\n        throw message;\n    }\n\n}\n"]}