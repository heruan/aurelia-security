{"version":3,"sources":["../../src/main/providers/oauth2.ts"],"names":[],"mappings":";AAGA;IAcI,gBAAmB,IAAY,EAAE,KAAa,EAAE,aAAqB,EAAE,aAAkC;QACrG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACvC,CAAC;IAEM,qCAAoB,GAA3B;QAA4B,eAAkB;aAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;YAAlB,0BAAkB;;QAC1C,IAAI,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,IAAG,eAAa,IAAI,CAAC,IAAM,CAAA,CAAC;QAC/F,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,uBAAuB,GAAG,GAAG;cACxD,IAAI,CAAC,aAAa,CAAC,oBAAoB,GAAG,GAAG,GAAG,kBAAkB,CAAC,WAAW,CAAC,GAAG,GAAG;cACrF,IAAI,CAAC,aAAa,CAAC,sBAAsB,GAAG,GAAG,GAAG,IAAI,CAAC,aAAa,GAAG,GAAG;cAC1E,IAAI,CAAC,aAAa,CAAC,cAAc,GAAG,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;cAC/D,IAAI,CAAC,aAAa,CAAC,cAAc,GAAG,GAAG,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACjE,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC;IAC/B,CAAC;IAEO,8BAAa,GAArB;QACI,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChE,CAAC;IAEL,aAAC;AAAD,CAnCA,AAmCC,IAAA;AAnCY,wBAAM;AAqCnB;IAYI,6BAAmB,aAAqB;QARjC,2BAAsB,GAAW,WAAW,CAAC;QAE7C,yBAAoB,GAAW,cAAc,CAAC;QAE9C,mBAAc,GAAW,OAAO,CAAC;QAEjC,mBAAc,GAAW,OAAO,CAAC;QAGpC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IACvC,CAAC;IAEL,0BAAC;AAAD,CAhBA,AAgBC,IAAA;AAhBY,kDAAmB","file":"oauth2.js","sourcesContent":["import { Provider } from \"../provider\";\nimport { Principal } from \"../principal\";\n\nexport class OAuth2 implements Provider {\n\n    public configuration: OAuth2Configuration;\n\n    private name: string;\n\n    private title: string;\n\n    private applicationId: string;\n\n    private applicationSecret: string;\n\n    private accessToken: string;\n\n    public constructor(name: string, title: string, applicationId: string, configuration: OAuth2Configuration) {\n        this.name = name;\n        this.title = title;\n        this.applicationId = applicationId;\n        this.configuration = configuration;\n    }\n\n    public requestAuthorization(...scope: string[]): void {\n        let redirectUri = window.location.origin + window.location.pathname + `?provider=${this.name}`;\n        let url = this.configuration.authorizationRequestUrl + \"?\"\n        + this.configuration.redirectUriParamName + \"=\" + encodeURIComponent(redirectUri) + \"&\"\n        + this.configuration.applicationIdParamName + \"=\" + this.applicationId + \"&\"\n        + this.configuration.scopeParamName + \"=\" + scope.join(\",\") + \"&\"\n        + this.configuration.stateParamName + \"=\" + this.generateState();\n        window.location.href = url;\n    }\n\n    private generateState() {\n        return window.crypto.getRandomValues(new Uint32Array(1))[0];\n    }\n\n}\n\nexport class OAuth2Configuration {\n\n    public authorizationRequestUrl: string;\n\n    public applicationIdParamName: string = \"client_id\";\n\n    public redirectUriParamName: string = \"redirect_uri\";\n\n    public scopeParamName: string = \"scope\";\n\n    public stateParamName: string = \"state\";\n\n    public constructor(configuration: Object) {\n        Object.assign(this, configuration);\n    }\n\n}\n"]}