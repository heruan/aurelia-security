{"version":3,"sources":["../../src/main/index.ts"],"names":[],"mappings":";;AAKA,uDAAqD;AA4BjD,6DAAe;AA3BnB,yDAAuD;AA4BnD,gEAAgB;AA3BpB,mDAAiD;AA4B7C,uDAAa;AAxBjB,6DAA2D;AA4BvD,sEAAkB;AA3BtB,6DAA2D;AA4BvD,sEAAkB;AA3BtB,6DAA2D;AA4BvD,sEAAkB;AA3BtB,uDAAqD;AA4BjD,6DAAe;AA3BnB,mDAA+C;AAC/C,6CAA4C;AA2BxC,gDAAW;AAzBf,mBAA0B,sBAA8C,EAAE,mBAA6B;IACnG,IAAI,SAAS,GAAc,sBAAsB,CAAC,SAAS,CAAC;IAC5D,IAAI,OAAO,GAAiB,SAAS,CAAC,GAAG,CAAC,8BAAY,CAAC,CAAC;IACxD,IAAI,eAAe,GAAoB,SAAS,CAAC,GAAG,CAAC,kCAAe,CAAC,CAAC;IACtE,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACtB,mBAAmB,CAAC,eAAe,CAAC,CAAC;IACzC,CAAC;IACD,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,wCAAkB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAA,OAAO;QAC5E,MAAM,CAAC,OAAO,CAAC,GAAG,CAAS,eAAe,CAAC,aAAa,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;YAC7F,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,kCAAe,CAAC,KAAK,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAA,aAAa,IAAI,OAAA,eAAe,CAAC,oBAAoB,EAAE,EAAtC,CAAsC,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,EAAtB,CAAsB,CAAC,CAAC;AACrD,CAAC;AAZD,8BAYC","file":"index.js","sourcesContent":["import { FrameworkConfiguration } from \"aurelia-framework\";\nimport { Container } from \"aurelia-dependency-injection\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { Router } from \"aurelia-router\";\nimport { HttpClient } from \"aurelia-http-client\";\nimport { SecurityContext } from \"./security-context\";\nimport { AuthorizeRequest } from \"./authorize-request\";\nimport { AuthorizeStep } from \"./authorize-step\";\nimport { Principal } from \"./principal\";\nimport { SecurityRole } from \"./security-role\";\nimport { Credential } from \"./credential\";\nimport { ImplicitCredential } from \"./implicit-credential\";\nimport { PasswordCredential } from \"./password-credential\";\nimport { ProviderCredential } from \"./provider-credential\";\nimport { TokenCredential } from \"./token-credential\";\nimport { LocalStorage } from \"aurelia-storage\";\nimport { Preferences } from \"./preferences\";\n\nexport function configure(frameworkConfiguration: FrameworkConfiguration, pluginConfiguration: Function) {\n    let container: Container = frameworkConfiguration.container;\n    let storage: LocalStorage = container.get(LocalStorage);\n    let securityContext: SecurityContext = container.get(SecurityContext);\n    if (pluginConfiguration) {\n        pluginConfiguration(securityContext);\n    }\n    return securityContext.authenticate(new ImplicitCredential()).then(null, failure => {\n        return storage.get<string>(securityContext.configuration.authorizationTokenStorageKey).then(token => {\n            return securityContext.authenticate(new TokenCredential(token));\n        }).then(null, tokenNotValid => securityContext.deleteAndRevokeToken());\n    }).then(null, failure => console.debug(failure));\n}\n\nexport {\n    SecurityContext,\n    AuthorizeRequest,\n    AuthorizeStep,\n    Principal,\n    SecurityRole,\n    Credential,\n    ImplicitCredential,\n    PasswordCredential,\n    ProviderCredential,\n    TokenCredential,\n    Preferences\n};\n"]}